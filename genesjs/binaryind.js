import{Individual}from"./individual.js";export class BinaryInd extends Individual{constructor(genome,var_bits,sign_bits,precalc,struct,data=null,fitness=null){super(genome,data,fitness);this.var_bits=var_bits;this.sign_bits=sign_bits;this.precalc=precalc;this.struct=struct}clone(){return new BinaryInd([...this.genome],this.var_bits,this.sign_bits,this.precalc,this.struct,this.data,this.fitness===null?null:[...this.fitness])}get_genome(){var nice_genome=[];var genome=this.genome.join("");var n_vars=this.var_bits.length;var left=0;var v;var s;var p;for(let i=0;i<n_vars;i++){v=this.var_bits[i];s=this.sign_bits[i];p=this.precalc[i];if(s){if(genome[left]=="0"){nice_genome.push(parseInt(genome.substring(left+1,left+v),2)*p)}else{nice_genome.push(-parseInt(genome.substring(left+1,left+v),2)*p)}}else{nice_genome.push(parseInt(genome.substring(left,left+v),2)*p)}left+=v}return nice_genome}set_genome(genome){const n_vars=this.var_bits.length;const struct=this.struct;let new_raw=[];for(let i=0;i<n_vars;i++){new_raw=new_raw.concat(dec_to_bin(genome[i],struct[i][0],struct[i][1],struct[i][2]))}this.genome=new_raw}}