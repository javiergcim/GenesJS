export function general_ga(task,elitism,sec,gen=Infinity,verbose=Infinity){const start_time=Date.now();const n_elite=Math.floor(task.get_size()*elitism);task.evaluate();task.order_population();var elite_pop;for(let g=0;g<gen;g++){task.set_generation(g);elite_pop=task.get_subpopulation_copy(0,n_elite);task.apply_selection();task.mutate();task.evaluate();task.append_population(elite_pop,true);task.remove_duplicate_fitness();if(task.adjust_population_size()){task.evaluate();task.order_population()}if(verbose!==Infinity){if(g%verbose===0){console.log("Generation: "+g);console.log("Best fitness: "+task.get_individual(0).get_fitness().join(", ")+"\n")}}const current_time=(Date.now()-start_time)/1e3;if(current_time>sec){break}}task.set_generation(null);return task.get_individual(0)}export function cos_mutation_ga(task,max_mp,cycle_mp,elitism,sec,gen=Infinity,verbose=Infinity,report=null){const start_time=Date.now();cycle_mp=2*Math.PI/cycle_mp;const half_max_mp=max_mp/2;task.set_mutator_arg("mp",max_mp);const n_elite=Math.floor(task.get_size()*elitism);task.evaluate();task.order_population();var elite_pop;for(let g=0;g<gen;g++){task.set_generation(g);task.set_mutator_arg("mp",Math.cos(g*cycle_mp)*half_max_mp+half_max_mp);elite_pop=task.get_subpopulation_copy(0,n_elite);task.apply_selection();task.mutate();task.evaluate();task.append_population(elite_pop,true);task.remove_duplicate_fitness();if(task.adjust_population_size()){task.evaluate();task.order_population()}if(verbose!==Infinity){if(g%verbose===0){if(report!==null){report(g,task.get_individual(0).get_fitness(),task.get_individual(0).get_genome())}else{console.log("Generation: "+g);console.log("Best fitness: "+task.get_individual(0).get_fitness().join(", ")+"\n")}}}const current_time=(Date.now()-start_time)/1e3;if(current_time>=sec){break}}return task.get_individual(0)}